// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Bot.Builder.AI.Luis;
using Microsoft.Bot.Builder.Dialogs;
using Newtonsoft.Json;
using RichardSzalay.MockHttp;

namespace Microsoft.Bot.Builder.MockLuis
{
    /// <summary>
    /// Test class for creating cached LUIS responses for testing.
    /// </summary>
    /// <remarks>
    /// This will either use a cached LUIS response or generate a new one by calling LUIS.
    /// </remarks>
    public class MockLuisRecognizer : Recognizer
    {
        private string _responseDir;
        private LuisRecognizerOptionsV3 _options;
        private string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="MockLuisRecognizer"/> class.
        /// </summary>
        /// <param name="resourceDir">Where the settings file generated by lubuild is found.</param>
        /// <param name="name">Name of the LUIS model.</param>
        /// <param name="options">LUIS options.</param>
        public MockLuisRecognizer(
            LuisRecognizerOptionsV3 options,
            string resourceDir,
            string name)
        {
            _responseDir = Path.Combine(resourceDir, "cachedResponses", name);
            _name = name;
            _options = options;
            _options.IncludeAPIResults = true;
            if (!Directory.Exists(_responseDir))
            {
                Directory.CreateDirectory(_responseDir);
            }
        }

        public override async Task<RecognizerResult> RecognizeAsync(DialogContext dialogContext, string text, string locale, CancellationToken cancellationToken = default)
        { 
            var client = GetMockedClient(text);
            var recognizer = new LuisRecognizer(_options, client);
            var result = await recognizer.RecognizeAsync(dialogContext, text, locale, cancellationToken);
            if (client == null)
            {
                // Save response
                var outPath = ResponsePath(text);
                File.WriteAllText(outPath, JsonConvert.SerializeObject(result.Properties["luisResult"]));
            }

            return result;
        }

        private string ResponsePath(string utterance)
            => Path.Combine(_responseDir, $"{utterance.StableHash()}.json");

        private HttpClientHandler GetMockedClient(string utterance)
        {
            HttpClientHandler client = null;
            if (utterance != null)
            {
                var response = ResponsePath(utterance);
                if (File.Exists(response))
                {
                    var handler = new MockHttpMessageHandler();
                    handler
                        .When(_options.Application.Endpoint + "*")
                        .WithPartialContent(utterance)
                        .Respond("application/json", File.OpenRead(response));
                    client = new MockedHttpClientHandler(handler.ToHttpClient());
                }
            }

            return client;
        }
    }
}
